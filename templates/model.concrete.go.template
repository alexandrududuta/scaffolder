{{$resourceNameLower := .NameWithLowerFirst}}
{{$resourceNameUpper := .NameWithUpperFirst}}
package {{$resourceNameLower}}

import (
	"errors"
	"fmt"
	"strings"
)

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// Concrete{{$resourceNameUpper}} satisfies the {{$resourceNameUpper}} interface.
// It's used to hold the data representing a {{$resourceNameLower}}.

type Concrete{{$resourceNameUpper}} struct {
	id       uint64
	{{range .Fields}}
		{{.NameWithLowerFirst}} {{.GoType}}
	{{end}}
}

// Define the factory functions.

// Make{{$resourceNameUpper}} creates and returns a new uninitialised {{$resourceNameUpper}} object
func Make{{$resourceNameUpper}}() {{$resourceNameUpper}} {
	var concrete{{$resourceNameUpper}} Concrete{{$resourceNameUpper}}
	return &concrete{{$resourceNameUpper}}
}

// MakeInitialised{{$resourceNameUpper}} creates and returns a new {{$resourceNameUpper}} object initialised from
// the arguments
func MakeInitialised{{$resourceNameUpper}}(id uint64, {{range .Fields}}{{.NameWithLowerFirst}} {{.GoType}}{{if not .LastItem}}, {{end}}{{end}}) {{$resourceNameUpper}} {
	{{$resourceNameLower}} := Make{{$resourceNameUpper}}()
	{{$resourceNameLower}}.SetID(id)
	{{range .Fields}}
		{{if eq .Type "string"}}
			{{$resourceNameLower}}.Set{{.NameWithUpperFirst}}(strings.TrimSpace({{.NameWithLowerFirst}}))
		{{else}}
			{{$resourceNameLower}}.Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}})
		{{end}}
	{{end}}
	return {{$resourceNameLower}}
}

// Clone creates and returns a new {{$resourceNameUpper}} object initialised from a source {{$resourceNameUpper}}.
func Clone({{$resourceNameLower}} {{$resourceNameUpper}}) {{$resourceNameUpper}} {
	return MakeInitialised{{$resourceNameUpper}}({{$resourceNameLower}}.ID(), {{range .Fields}}{{$resourceNameLower}}.{{.NameWithUpperFirst}}(){{if not .LastItem}}, {{end}}{{end}})
}

// Define the getters.

// ID() gets the id of the {{$resourceNameLower}}.
func (o Concrete{{$resourceNameUpper}}) ID() uint64 {
	return o.id
}
{{range .Fields}}
	//{{.NameWithUpperFirst}} gets the {{.NameWithLowerFirst}} of the {{$resourceNameLower}}.
	func (o Concrete{{$resourceNameUpper}}) {{.NameWithUpperFirst}}() {{.GoType}} {
		return o.{{.NameWithLowerFirst}}
	}
{{end}}
// String gets the {{$resourceNameLower}} as a string.
func (o Concrete{{$resourceNameUpper}}) String() string {
	return fmt.Sprintf("Concrete{{$resourceNameUpper}}={id=%d, {{range .Fields}}{{.NameWithLowerFirst}}=%v{{if not .LastItem}}, {{end}}{{end}}{{"}"}}",
		o.id, {{range .Fields}}o.{{.NameWithLowerFirst}}{{if not .LastItem}}, {{end}}{{end}})		
}
// DisplayName returns a name for the object composed of the values of the id and 
// the value of any field not marked as excluded.
func (o Concrete{{$resourceNameUpper}}) DisplayName() string {
	return fmt.Sprintf("%d{{range .Fields}}{{if not .ExcludeFromDisplay}} %v{{end}}{{end}}",
		o.id{{range .Fields}}{{if not .ExcludeFromDisplay}}, o.{{.NameWithLowerFirst}}{{end}}{{end}})
}

// Define the setters.

// SetID sets the id to the given value.
func (o *Concrete{{$resourceNameUpper}}) SetID(id uint64) {
	o.id = id
	}
	
{{range .Fields}}
	// Set{{.NameWithUpperFirst}} sets the {{.NameWithLowerFirst}} of the {{$resourceNameLower}}.
	func (o *Concrete{{$resourceNameUpper}}) Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}} {{.GoType}}) {
   	{{if eq .Type "string"}}
		o.{{.NameWithLowerFirst}} = strings.TrimSpace({{.NameWithLowerFirst}})
	{{else}}
		o.{{.NameWithLowerFirst}} = {{.NameWithLowerFirst}}
	{{end}}
	}
{{end}}

// Define the validation.
func (o *Concrete{{$resourceNameUpper}}) Validate() error {
	
	// Trim and test all mandatory string fields
	
	errorMessage := ""
	{{range .Fields}}
	    {{if and .Mandatory (eq .Type "string")}}
	        if len(strings.TrimSpace(o.{{.NameWithUpperFirst}}())) <= 0 {
				errorMessage += "you must specify the {{.NameWithLowerFirst}} "
			}
		{{end}}
	{{end}}
	if len(errorMessage) > 0 {
		return errors.New(errorMessage)
	}
	return nil
}
