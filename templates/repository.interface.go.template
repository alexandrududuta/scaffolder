package {{.NameWithLowerFirst}}

{{.Imports}}

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// This interface defines a repository (AKA a Data Access Object) for
// the {{.TableName}} table.

type Repository interface {

	// FindAll() returns a pointer to a slice of valid {{.PluralNameWithUpperFirst}} 
	// records.  Any invalid records are left out of the slice (so it may be empty).
	FindAll() ([]{{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}, error)

	// FindByid fetches the row from the {{.TableName}} table with the given uint64 
	// id and validates the data.  If the data is valid, the method creates a new
	// {{.NameWithUpperFirst}} record and returns a pointer to the version in memory.  
	// If the data is not valid the method returns an error message.
	FindByID(id uint64) ({{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}, error)

	// FindByid fetches the row from the {{.TableName}} table with the given string 
	// id and validates the data.  If it's valid the method creates a {{.NameWithUpperFirst}} 
	// object and returns a pointer to it.  If the data is not valid the function 
	// returns an error message.
	//
	// The ID in the database is always numeric so the method first checks that the 
	// given ID is numeric before making the DB call, returning an error if it's not.
	FindByIDStr(idStr string) ({{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}, error)

	// Create takes a {{.NameWithLowerFirst}} and creates a record in the {{.TableName}}
	// table containing the same data plus an auto-incremented ID.  It returns a 
	// pointer to the resulting {{.NameWithLowerFirst}} object, or any error that 
	// the DB call supplies to it.
	Create({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) ({{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}, error)

	// Update takes a {{.NameWithLowerFirst}} object, validates it and, if it's
	// valid, searches the {{.TableName}} table for a record with a matching ID and 
	// updates it.  It returns the number of rows affected or any error from the
	// DB update call.  On a successful update, it should return 1, having updated 
	// one row.
	Update({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) (uint64, error)

	// DeleteById takes the given uint64 ID and deletes the record with that ID 
	// from the {{.TableName}} table.  It return the count of rows affected or any
	// error from the DB delete call.  On a successful delete, it should return 1, 
	// having deleted one row.
	DeleteByID(id uint64) (int64, error)

	// DeleteByIdStr takes the given String ID and deletes the record with that ID 
	// from the {{.TableName}} table.  The IDs in the database are numeric aso the 
	// method checks that the given ID is also numeric before it makes the DB call
	// and returns an error if not.  If the ID looks sensible, the method attempts 
	// the delete and returns the number of rows affected or any error from the
	// DB delete call. On a successful delete, it should return 1, having deleted 
	// one row.

	DeleteByIDStr(idStr string) (int64, error)

	// Close closes the repository, reclaiming any redundant resources, in
	// particular, any open database connection and transactions.  Anything that
	// creates a repository MUST call this when it's finished, to avoid resource 
	// leaks.
	Close()
}
