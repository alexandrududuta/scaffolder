package services

{{.Imports}}

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// ConcreteServices satisfies the Services interface and provides services to
// other modules.  For example, it provides factory methods that create the basic
// objects that represent database table rows, returning each as an interface
// reference.  This supports inversion of control.  Rather than creating an object
// itself (and therefore knowing its concrete type), a module use the service to
// create the object.  The module also only knows the service as an interface, so
// during testing it can be given a different version of the service which returns 
// test objects such as pre-prepared mocks. 

type ConcreteServices struct {
	{{range .Resources}}
		{{.NameWithLowerFirst}}Repo  {{.NameWithLowerFirst}}Repo.Repository
	{{end}}
	templateMap *map[string]map[string]retrofitTemplate.Template
}

// Template returns an HTML template, given a resource and a CRUD operation (Index,
// Edit etc).
func (cs ConcreteServices) Template(resource string, operation string) retrofitTemplate.Template {
	return (*cs.templateMap)[resource][operation]
}

// SetTemplates sets all HTML templates from the given map.
func (cs *ConcreteServices) SetTemplates(templateMap *map[string]map[string]retrofitTemplate.Template) {
	cs.templateMap = templateMap
}

// SetTemplate sets the HTML template for the resource and operation.
func (cs *ConcreteServices) SetTemplate(resource string, operation string,
	template retrofitTemplate.Template) {

	if (*cs.templateMap)[resource] == nil {
		// New row.
		(*cs.templateMap)[resource] = make(map[string]retrofitTemplate.Template)
	}

	(*cs.templateMap)[resource][operation] = template
}

{{range .Resources}}
	{{$resourceNameLower := .NameWithLowerFirst}}
	{{$resourceNameUpper := .NameWithUpperFirst}}
	// {{.NameWithUpperFirst}}Repository gets the {{.NameWithLowerFirst}} repository.
	func (cs ConcreteServices) {{.NameWithUpperFirst}}Repository() {{.NameWithLowerFirst}}Repo.Repository {
		return cs.{{.NameWithLowerFirst}}Repo
	}
	
	// Set{{.NameWithUpperFirst}}Repository sets the {{.NameWithLowerFirst}} repository.
	func (cs *ConcreteServices) Set{{.NameWithUpperFirst}}Repository(repo {{.NameWithLowerFirst}}Repo.Repository) {
		cs.{{.NameWithLowerFirst}}Repo = repo
	}

	// Make{{.NameWithUpperFirst}} creates and returns a new uninitialised {{.NameWithLowerFirst}} object, made by the
	// GORP Make{{.NameWithUpperFirst}}.
	func (cs *ConcreteServices) Make{{.NameWithUpperFirst}}() {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}} {
		return gorp{{.NameWithUpperFirst}}.Make{{.NameWithUpperFirst}}()
	}
	
	// MakeInitialised{{.NameWithUpperFirst}} creates and returns a new {{.NameWithUpperFirst}} object initialised from
	// the arguments and created using the GORP MakeInitialised{{.NameWithUpperFirst}}.
	func (cs *ConcreteServices) MakeInitialised{{.NameWithUpperFirst}}(id uint64, {{range .Fields}}{{.NameWithLowerFirst}} {{.GoType}}{{if not .LastItem}}, {{end}}{{end}}) {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}} {
		return gorp{{.NameWithUpperFirst}}.MakeInitialised{{.NameWithUpperFirst}}(id, {{range .Fields}}{{.NameWithLowerFirst}}{{if not .LastItem}}, {{end}}{{end}})
	}
	
	// Clone{{.NameWithUpperFirst}} creates and returns a new {{.NameWithUpperFirst}} object initialised from a source {{.NameWithUpperFirst}}.
	// The copy is made using the GORP Clone.
	func (cs *ConcreteServices) Clone{{.NameWithUpperFirst}}(source {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}} {
		return gorp{{.NameWithUpperFirst}}.Clone(source)
	}
	
	// Make{{.NameWithUpperFirst}}Form creates and returns an uninitialised {{.NameWithLowerFirst}} form.
	func (cs *ConcreteServices) Make{{.NameWithUpperFirst}}Form() {{.NameWithLowerFirst}}Forms.SingleItemForm {
		return {{.NameWithLowerFirst}}Forms.MakeSingleItemForm()
	}
	
	// MakeInitialised{{.NameWithUpperFirst}}Form creates a GORP {{.NameWithLowerFirst}} form containing the given
	// {{.NameWithLowerFirst}} and returns it as a {{.NameWithUpperFirst}}Form.
	func (cs *ConcreteServices) MakeInitialised{{.NameWithUpperFirst}}Form({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) {{.NameWithLowerFirst}}Forms.SingleItemForm {
		return {{.NameWithLowerFirst}}Forms.MakeInitialisedSingleItemForm({{.NameWithLowerFirst}})
	}
	
	// MakeListForm creates and returns a new uninitialised {{.NameWithLowerFirst}} ListForm
	// object as a ListForm.
	func (cs *ConcreteServices) Make{{.NameWithUpperFirst}}ListForm() {{.NameWithLowerFirst}}Forms.ListForm {
		return {{.NameWithLowerFirst}}Forms.MakeListForm()
	}
{{end}}
