{{$resourceNameLower := .NameWithLowerFirst}}
{{$resourceNameUpper := .NameWithUpperFirst}}
package {{$resourceNameLower}}

import (
	"testing"
)

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// Unit tests for the Concrete{{$resourceNameUpper}} object.

func TestUnitCreateConcrete{{$resourceNameUpper}}Setters(t *testing.T) {
	var expectedID uint64 = 42
	/* 
	    This creates the expected values using the first test value from each field, 
	    something like:
		var expectedForename string = "s1"
		var expectedSurname string = "s3"
	*/
	{{range $index, $element := .Fields}}
	var expected{{.NameWithUpperFirst}} {{.Type}} = "{{index .TestValues 0}}"
	{{end}}
	{{$resourceNameLower}} := MakeInitialised{{$resourceNameUpper}}(expectedID, {{range .Fields}}expected{{.NameWithUpperFirst}}{{if not .LastItem}}, {{end}}{{end}})
	if {{$resourceNameLower}}.ID() != expectedID {
		t.Errorf("expected ID to be %d actually %d", expectedID, {{$resourceNameLower}}.ID())
	}
	{{range .Fields}}
	if {{$resourceNameLower}}.{{.NameWithUpperFirst}}() != expected{{.NameWithUpperFirst}} {
		t.Errorf("expected {{.NameWithLowerFirst}} to be %s actually %s", expected{{.NameWithUpperFirst}}, {{$resourceNameLower}}.{{.NameWithUpperFirst}}())
	}
	{{end}}
}
