{{$resourceNameLower := .NameWithLowerFirst}}
{{$resourceNameUpper := .NameWithUpperFirst}}
package {{.NameWithLowerFirst}}

{{.Imports}}

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// ConcreteSingleItemForm satisfies the {{.NameWithLowerFirst}} SingleItemForm interface.
// It's used as a Data Transfer Object to carry the data for a {{.NameWithLowerFirst}}
// between the web browser and the {{.NameWithLowerFirst}} controller.

type ConcreteSingleItemForm struct {
	{{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}
	errorMessage string
	notice       string
	fieldError   map[string]string
	isValid      bool
}

// Define the factory functions.

// MakeSingleItemForm creates and returns a new uninitialised form object
func MakeSingleItemForm() SingleItemForm {
	var concreteSingleItemForm ConcreteSingleItemForm
	return &concreteSingleItemForm
}

// MakeInitialisedSingleItemForm creates and returns a new form object
// containing the given {{.NameWithLowerFirst}}.
func MakeInitialisedSingleItemForm({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) SingleItemForm {
	form := MakeSingleItemForm()
	form.Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}})
	return form
}

// Getters

// {{.NameWithUpperFirst}} gets the {{.NameWithLowerFirst}} embedded in the form.
func (form ConcreteSingleItemForm) {{.NameWithUpperFirst}}() {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}} {
	return form.{{.NameWithLowerFirst}}
}

// Notice gets the notice.
func (form ConcreteSingleItemForm) Notice() string {
	return form.notice
}

// ErrorMessage gets the general error message.
func (form ConcreteSingleItemForm) ErrorMessage() string {
	return form.errorMessage
}

// FieldErrors returns all the field errors as a map.
func (form ConcreteSingleItemForm) FieldErrors() map[string]string {
	return form.fieldError
}

// ErrorForField returns the error message about a field (may be an empty string).
func (form ConcreteSingleItemForm) ErrorForField(key string) string {
	if form.fieldError == nil {
		// The field error map has not been set up.
		return ""
	}
	return form.fieldError[key]
}

// Valid returns true if the contents of the form is valid
func (form ConcreteSingleItemForm) Valid() bool { 
	return form.isValid
}

// String returns a string version of the {{.NameWithUpperFirst}}Form.
func (form ConcreteSingleItemForm) String() string {
	return fmt.Sprintf("ConcreteSingleItemForm={{"{"}}{{.NameWithLowerFirst}}=%s, notice=%s,errorMessage=%s,fieldError=%s{{"}"}}",
		form.{{.NameWithLowerFirst}},
		form.notice,
		form.errorMessage,
		utilities.Map2String(form.fieldError))
}

// Setters

// Set{{.NameWithUpperFirst}} sets the {{.NameWithUpperFirst}} in the form.
func (form *ConcreteSingleItemForm) Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) {
	form.{{.NameWithLowerFirst}} = {{.NameWithLowerFirst}}
}

// SetNotice sets the notice.
func (form *ConcreteSingleItemForm) SetNotice(notice string) {
	form.notice = notice
}

//SetErrorMessage sets the general error message.
func (form *ConcreteSingleItemForm) SetErrorMessage(errorMessage string) {
	form.errorMessage = errorMessage
}

// SetErrorMessageForField sets the error message for a named field
func (form *ConcreteSingleItemForm) SetErrorMessageForField(fieldname, errormessage string) {
	if form.fieldError == nil {
		form.fieldError = make(map[string]string)
	}
	form.fieldError[fieldname] = errormessage
}

// SetValid sets a warning that the data in the form is invalid
func (form *ConcreteSingleItemForm) SetValid(value bool) {
	form.isValid = value
}

// Validate validates the data in the {{.NameWithUpperFirst}} and sets the various error messages.
// It returns true if the data is valid, false if there are errors.
func (form *ConcreteSingleItemForm) Validate() bool {
	valid := true

	// Trim and test all mandatory string items. 
	{{range .Fields}}
		{{if and .Mandatory (eq .Type "string")}}
			if len(strings.TrimSpace(form.{{$resourceNameLower}}.{{.NameWithUpperFirst}}())) <= 0 {
					form.SetErrorMessageForField("{{.NameWithUpperFirst}}", "you must specify the {{.NameWithLowerFirst}}")
					valid = false
				}
		{{end}}
	{{end}}
	return valid
}