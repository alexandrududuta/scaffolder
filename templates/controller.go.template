{{$resourceNameLower := .NameWithLowerFirst}}
{{$resourceNameUpper := .NameWithUpperFirst}}
package {{.NameWithLowerFirst}}

{{.Imports}}

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// Package {{.PluralNameWithLowerFirst}} provides the controller for the {{.PluralNameWithLowerFirst}} resource.  It provides a
// set of action functions that are triggered by HTTP requests and implement the
// Create, Read, Update and Delete (CRUD) operations on the {{.PluralNameWithLowerFirst}} resource:
//
//    GET {{.PluralNameWithLowerFirst}}/ - runs Index() to list all {{.PluralNameWithLowerFirst}}
//    GET {{.PluralNameWithLowerFirst}}/n - runs Show() to display the details of the {{.NameWithLowerFirst}} with ID n
//    GET {{.PluralNameWithLowerFirst}}/create - runs New() to display the page to create a {{.NameWithLowerFirst}} using any data in the form to pre-populate it
//    PUT {{.PluralNameWithLowerFirst}}/n - runs Create() to create a new {{.NameWithLowerFirst}} using the data in the supplied form
//    GET {{.PluralNameWithLowerFirst}}/n/edit - runs Edit() to display the page to edit the {{.NameWithLowerFirst}} with ID n, using any data in the form to pre-populate it
//    PUT {{.PluralNameWithLowerFirst}}/n - runs Update() to update the {{.NameWithLowerFirst}} with ID n using the data in the form
//    DELETE {{.PluralNameWithLowerFirst}}/n - runs Delete() to delete the {{.NameWithLowerFirst}} with id n

type Controller struct {
	services services.Services
	verbose bool
}

// MakeController is a factory that creates a {{.PluralNameWithLowerFirst}} controller
func MakeController(services services.Services, verbose bool) Controller {
	var controller Controller
	controller.SetServices(services)
	controller.SetVerbose(verbose)
	return controller
}

// Index fetches a list of all valid {{.PluralNameWithLowerFirst}} and displays the index page.
func (c Controller) Index(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.ListForm) {

	log.SetPrefix("Index()")

	c.List{{.PluralNameWithUpperFirst}}(req, resp, form)
	return
}

// Show displays the details of the {{.NameWithLowerFirst}} with the ID given in the URI.
func (c Controller) Show(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("Show()")

	repository := c.services.{{.NameWithUpperFirst}}Repository()

	// Get the details of the {{.NameWithLowerFirst}} with the given ID.
	{{.NameWithLowerFirst}}, err := repository.FindByID(form.{{.NameWithUpperFirst}}().ID())
	if err != nil {
		// no such {{.NameWithLowerFirst}}.  Display index page with error message
		em := "no such {{.NameWithLowerFirst}}"
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}

	// The {{.NameWithLowerFirst}} in the form contains just an ID.  Replace it with the
	// complete {{.NameWithLowerFirst}} record that we just fetched.
	form.Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}})

	page := c.services.Template("{{.NameWithLowerFirst}}", "Show")
	if page == nil {
		em := fmt.Sprintf("internal error displaying Show page - no HTML template")
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}

	err = page.Execute(resp.ResponseWriter, form)
	if err != nil {
		em := fmt.Sprintf("error displaying page - %s", err.Error())
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}
	return
}

// New displays the page to create a {{.NameWithLowerFirst}},
func (c Controller) New(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("New()")

	// Display the page.
	page := c.services.Template("{{.NameWithLowerFirst}}", "Create")
	if page == nil {
		em := fmt.Sprintf("internal error displaying Create page - no HTML template")
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}
	err := page.Execute(resp.ResponseWriter, form)
	if err != nil {
		log.Printf("error displaying new page - %s", err.Error())
		em := fmt.Sprintf("error displaying page - %s", err.Error())
		c.ErrorHandler(req, resp, em)
		return
	}
}

// Create creates a {{.NameWithLowerFirst}} using the data from the HTTP form displayed
// by a previous NEW request.
func (c Controller) Create(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("Create()")

	if !(form.Valid()) {
		// validation errors.  Return to create screen with error messages in the form data
		if c.verbose {
			log.Printf("Validation failed\n")
		}
		page := c.services.Template("{{.NameWithLowerFirst}}", "Create")
		if page == nil {
			em := fmt.Sprintf("internal error displaying Create page - no HTML template")
			log.Printf("%s\n", em)
			c.ErrorHandler(req, resp, em)
			return
		}
		err := page.Execute(resp.ResponseWriter, &form)
		if err != nil {
			em := fmt.Sprintf("Internal error while preparing create form after failed validation - %s",
				err.Error())
			log.Printf("%s\n", em)
			c.ErrorHandler(req, resp, em)
			return
		}
		return
	}

	// Create a {{.NameWithLowerFirst}} in the database using the validated data in the form
	repository := c.services.{{.NameWithUpperFirst}}Repository()

	created{{.NameWithUpperFirst}}, err := repository.Create(form.{{.NameWithUpperFirst}}())
	if err != nil {
		// Failed to create {{.NameWithLowerFirst}}.  Display index page with error message.
		em := fmt.Sprintf("Could not create {{.NameWithLowerFirst}} %s - %s", form.{{.NameWithUpperFirst}}().DisplayName(), err.Error())
		c.ErrorHandler(req, resp, em)
		return
	}

	// Success! {{.NameWithUpperFirst}} created.  Display index page with confirmation notice
	notice := fmt.Sprintf("created {{.NameWithLowerFirst}} %s", created{{.NameWithUpperFirst}}.DisplayName())
	if c.verbose {
		log.Printf("%s\n", notice)
	}
	listForm := c.services.Make{{.NameWithUpperFirst}}ListForm()
	listForm.SetNotice(notice)
	c.List{{.PluralNameWithUpperFirst}}(req, resp, listForm)
	return
}

// Edit fetches the data for the {{.PluralNameWithLowerFirst}} record with the given ID and displays
// the edit page, populated with that data.
func (c Controller) Edit(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("Edit() ")
	
	id := form.{{.NameWithUpperFirst}}().ID()

	repository := c.services.{{.NameWithUpperFirst}}Repository()
	// Get the existing data for the {{.NameWithLowerFirst}}
	{{.NameWithLowerFirst}}, err := repository.FindByID(id)
	if err != nil {
		// No such {{.NameWithLowerFirst}}.  Display index page with error message.
		em := err.Error()
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}
	// Got the {{.NameWithLowerFirst}} with the given ID.  Put it into the form and validate it.
	// If the data is invalid, continue - the user may be trying to fix it.

	form.Set{{.NameWithUpperFirst}}({{.NameWithLowerFirst}})
	if c.verbose && !form.Validate() {
		em := fmt.Sprintf("invalid record in the {{.PluralNameWithLowerFirst}} database - %s",
			{{.NameWithLowerFirst}}.String())
		log.Printf("%s\n", em)
	}

	// Display the edit page
	page := c.services.Template("{{.NameWithLowerFirst}}", "Edit")
	if page == nil {
		em := fmt.Sprintf("internal error displaying Edit page - no HTML template")
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}
	err = page.Execute(resp.ResponseWriter, form)
	if err != nil {
		// error while preparing edit page
		log.Printf("%s: error displaying edit page - %s", err.Error())
		em := fmt.Sprintf("error displaying page - %s", err.Error())
		c.ErrorHandler(req, resp, em)
	}
}

// Update responds to a PUT request.  For example:
// PUT /{{.PluralNameWithLowerFirst}}/1
// It's invoked by the form displayed by a previous Edit request.  If the ID in the URI is
// valid and the request parameters from the form specify valid {{.PluralNameWithLowerFirst}} data, it updates the
// record and displays the index page with a confirmation message, otherwise it displays
// the edit page again with the given data and some error messages.
func (c Controller) Update(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("Update() ")
	
	if !form.Valid() {
		// The supplied data is invalid.  The validator has set error messages.  
		// Return to the edit screen.
		if c.verbose {
			log.Printf("Validation failed\n")
		}
		page := c.services.Template("{{.NameWithLowerFirst}}", "Edit")
		if page == nil {
			em := fmt.Sprintf("internal error displaying Edit page - no HTML template")
			log.Printf("%s\n", em)
			c.ErrorHandler(req, resp, em)
			return
		}
		err := page.Execute(resp.ResponseWriter, form)
		if err != nil {
			log.Printf("%s: error displaying edit page - %s", err.Error())
			em := fmt.Sprintf("error displaying page - %s", err.Error())
			c.ErrorHandler(req, resp, em)
			return
		}
		return
	}

	if form.{{.NameWithUpperFirst}}() == nil {
		em := fmt.Sprint("internal error - form should contain an updated {{.NameWithLowerFirst}} record")
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}

	// Get the {{.NameWithLowerFirst}} specified in the form from the DB.
	// If that fails, the id in the form doesn't match any record.
	repository := c.services.{{.NameWithUpperFirst}}Repository()
	{{.NameWithLowerFirst}}, err := repository.FindByID(form.{{.NameWithUpperFirst}}().ID())
	if err != nil {
		// There is no {{.NameWithLowerFirst}} with this ID.  The ID is chosen by the user from a
		// supplied list and it should always be valid, so there's something screwy
		// going on.  Display the index page with an error message.
		em := fmt.Sprintf("error searching for {{.NameWithLowerFirst}} with id %s - %s",
			form.{{.NameWithUpperFirst}}().ID(), err.Error())
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}

	// We have a matching {{.NameWithLowerFirst}} from the DB.
	if c.verbose {
		log.Printf("got {{.NameWithLowerFirst}} %v\n", {{.NameWithLowerFirst}})
	}

	// we have a record and valid new values.  Update.
	{{range .Fields}}
		{{$resourceNameLower}}.Set{{.NameWithUpperFirst}}(form.{{$resourceNameUpper}}().{{.NameWithUpperFirst}}())
	{{end}}
	if c.verbose {
		log.Printf("updating {{.NameWithLowerFirst}} to %v\n", {{.NameWithLowerFirst}})
	}
	_, err = repository.Update({{.NameWithLowerFirst}})
	if err != nil {
		// The commit failed.  Display the edit page with an error message
		em := fmt.Sprintf("Could not update {{.NameWithLowerFirst}} - %s", err.Error())
		log.Printf("%s\n", em)
		form.SetErrorMessage(em)

		page := c.services.Template("{{.NameWithLowerFirst}}", "Edit")
		if page == nil {
			em := fmt.Sprintf("internal error displaying Edit page - no HTML template")
			log.Printf("%s\n", em)
			c.ErrorHandler(req, resp, em)
			return
		}
		err = page.Execute(resp.ResponseWriter, form)
		if err != nil {
			// Error while recovering from another error.  This is looking like a habit!
			em := fmt.Sprintf("Internal error while preparing edit page after failing to update {{.NameWithLowerFirst}} in DB - %s", err.Error())
			log.Printf("%s\n", em)
			c.ErrorHandler(req, resp, em)
		} else {
			return
		}
	}

	// Success!  Display the index page with a confirmation notice
	notice := fmt.Sprintf("updated {{.NameWithLowerFirst}} %s", form.{{.NameWithUpperFirst}}().DisplayName())
	if c.verbose {
		log.Printf("%s:\n", notice)
	}
	listForm := c.services.Make{{.NameWithUpperFirst}}ListForm()
	listForm.SetNotice(notice)
	c.List{{.PluralNameWithUpperFirst}}(req, resp, listForm)
	return
}

// Delete responds to a DELETE request and deletes the record with the given ID,
// eg DELETE http://server:port/{{.PluralNameWithLowerFirst}}/1.
func (c Controller) Delete(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.SingleItemForm) {

	log.SetPrefix("Delete()")

	repository := c.services.{{.NameWithUpperFirst}}Repository()
	// Attempt the delete
	_, err := repository.DeleteByID(form.{{.NameWithUpperFirst}}().ID())
	if err != nil {
		// failed - cannot delete {{.NameWithLowerFirst}}
		em := fmt.Sprintf("Cannot delete {{.NameWithLowerFirst}} with id %d - %s", 
			form.{{.NameWithUpperFirst}}().ID(), err.Error())
		log.Printf("%s\n", em)
		c.ErrorHandler(req, resp, em)
		return
	}
	// Success - {{.NameWithLowerFirst}} deleted.  Display the index view with a notification.
	listForm := c.services.Make{{.NameWithUpperFirst}}ListForm()
	notice := fmt.Sprintf("deleted {{.NameWithLowerFirst}} with id %d",
		form.{{.NameWithUpperFirst}}().ID())
	if c.verbose {
		log.Printf("%s:\n", notice)
	}
	listForm.SetNotice(notice)
	c.List{{.PluralNameWithUpperFirst}}(req, resp, listForm)
	return
}

// ErrorHandler displays the index page with an error message
func (c Controller) ErrorHandler(req *restful.Request, resp *restful.Response,
	errormessage string) {

	form := c.services.Make{{.NameWithUpperFirst}}ListForm()
	form.SetErrorMessage(errormessage)
	c.List{{.PluralNameWithUpperFirst}}(req, resp, form)
}

// SetServices sets the services.
func (c *Controller) SetServices(services services.Services) {
	c.services = services
}

// SetVerbose sets the verbosity level.
func (c *Controller) SetVerbose(verbose bool) {
	c.verbose = verbose
}

/*
 * The List{{.PluralNameWithUpperFirst}} helper method fetches a list of {{.PluralNameWithLowerFirst}} and displays the
 * index page.  It's used to fulfil an index request but the index page is
 * also used as the last page of a sequence of requests (for example new,
 * create, index).  If the sequence was successful, the form may contain a
 * confirmation note.  If the sequence failed, the form should contain an error
 * message.
 */
func (c Controller) List{{.PluralNameWithUpperFirst}}(req *restful.Request, resp *restful.Response,
	form {{.NameWithLowerFirst}}Forms.ListForm) {

	log.SetPrefix("Controller.List{{.PluralNameWithUpperFirst}}() ")

	repository := c.services.{{.NameWithUpperFirst}}Repository()

	{{.PluralNameWithLowerFirst}}List, err := repository.FindAll()
	if err != nil {
		em := fmt.Sprintf("error getting the list of {{.PluralNameWithLowerFirst}} - %s", err.Error())
		log.Printf("%s\n", em)
		form.SetErrorMessage(em)
	}
	if c.verbose{
		log.Printf("%d {{.PluralNameWithLowerFirst}}", len({{.PluralNameWithLowerFirst}}List))
	}
	if len({{.PluralNameWithLowerFirst}}List) <= 0 {
		form.SetNotice("there are no {{.PluralNameWithLowerFirst}} currently set up")
	}
	form.Set{{.PluralNameWithUpperFirst}}({{.PluralNameWithLowerFirst}}List)

	// Display the index page
	page := c.services.Template("{{.NameWithLowerFirst}}", "Index")
	if page == nil {
		log.Printf("no Index page for {{.NameWithLowerFirst}} controller")
		utilities.Dead(resp)
		return
	}
	err = page.Execute(resp.ResponseWriter, form)
	if err != nil {
		/*
		 * Error while displaying the index page.  We handle most internal
		 * errors by displaying the controller's index page.  That's just failed,
		 * so fall back to the static error page.
		 */
		log.Printf(err.Error())
		page = c.services.Template("html", "Error")
		if page == nil {
			log.Printf("no Error page")
			utilities.Dead(resp)
			return
		}
		err = page.Execute(resp.ResponseWriter, form)
		if err != nil {
			// Can't display the static error page either.  Bale out.
			em := fmt.Sprintf("fatal error - failed to display error page for error %s\n", err.Error())
			log.Printf(em)
			panic(em)
		}
		return
	}
}
