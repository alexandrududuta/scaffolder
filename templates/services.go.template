package services

{{.Imports}}

// Generated by the goblimey scaffold generator.  You are STRONGLY
// recommended not to alter this file, as it will be overwritten next time the 
// scaffolder is run.  For the same reason, do not commit this file to a 
// source code repository.  Commit the json specification which was used to 
// produce it.

// The Services interface provides services to other modules.  For example, it 
// provides factory methods that create the basic objects used by the system, 
// returning each as an interface reference.  This supports inversion  of control.  
// Rather than creating an object itself (and therefore knowing its concrete type), 
// a module should use the service to create the object.  The module also only 
// knows the service as an interface, so during testing it can be given a different 
// version of the service which returns test objects such as pre-prepared mocks.

type Services interface {
	
	// Template gets the HTML template named by the resource and operation.
	Template(resource string, operation string) retrofitTemplate.Template

	// SetTemplate sets the HTML template for the resource and operation.
	SetTemplate(resource string, operation string, template retrofitTemplate.Template)

	// SetTemplates sets all HTML templates from the given map
	SetTemplates(templateMap *map[string]map[string]retrofitTemplate.Template)

{{range .Resources}}
	{{$resourceNameLower := .NameWithLowerFirst}}
	{{$resourceNameUpper := .NameWithUpperFirst}}
	// {{.NameWithUpperFirst}}Repository returns the {{.NameWithLowerFirst}} repository.
	{{.NameWithUpperFirst}}Repository() {{.NameWithLowerFirst}}Repo.Repository

	// Set{{.NameWithUpperFirst}}Repository sets the {{.NameWithLowerFirst}} repository.
	Set{{.NameWithUpperFirst}}Repository(repository {{.NameWithLowerFirst}}Repo.Repository)
	
	// Make{{.NameWithUpperFirst}} creates and returns a new uninitialised {{.NameWithUpperFirst}} object.
	Make{{.NameWithUpperFirst}}() {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}

	// MakeInitialised{{.NameWithUpperFirst}} creates and returns a new {{.NameWithUpperFirst}} object initialised from
	// the arguments.
	MakeInitialised{{.NameWithUpperFirst}}(id uint64, {{range .Fields}}{{.NameWithLowerFirst}} {{.GoType}}{{if not .LastItem}}, {{end}}{{end}}) {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}

	// Clone{{.NameWithUpperFirst}} creates and returns a new {{.NameWithUpperFirst}} object initialised from a source {{.NameWithUpperFirst}}.
	Clone{{.NameWithUpperFirst}}(source {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}

	// Make{{.NameWithUpperFirst}}Form creates and returns an uninitialised {{.NameWithLowerFirst}} form.
	Make{{.NameWithUpperFirst}}Form() {{.NameWithLowerFirst}}Forms.SingleItemForm

	// MakeInitialised{{.NameWithUpperFirst}}Form creates and returns a {{.NameWithLowerFirst}} form containing the
	// given {{.NameWithLowerFirst}} object.
	MakeInitialised{{.NameWithUpperFirst}}Form({{.NameWithLowerFirst}} {{.NameWithLowerFirst}}.{{.NameWithUpperFirst}}) {{.NameWithLowerFirst}}Forms.SingleItemForm

	// Make{{.NameWithUpperFirst}}ListForm creates a new uninitialised {{.NameWithLowerFirst}} ConcreteListForm object and
	// returns it as a ListForm.
	Make{{.NameWithUpperFirst}}ListForm() {{.NameWithLowerFirst}}Forms.ListForm
{{end}}
}
